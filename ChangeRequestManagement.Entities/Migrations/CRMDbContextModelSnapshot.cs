// <auto-generated />
using System;
using ChangeRequestManagement.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ChangeRequestManagement.Entities.Migrations
{
    [DbContext(typeof(CRMDbContext))]
    partial class CRMDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ChangeRequestManagement.Entities.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("AdminId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            AdminId = 2,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            PersonId = 789
                        },
                        new
                        {
                            AdminId = 1,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            PersonId = 1
                        });
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ChangeRequest", b =>
                {
                    b.Property<int>("ChangeRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ChangeRequestNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChangeRequestTypeListItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleId")
                        .HasColumnType("integer");

                    b.Property<int>("PriorityListItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ChangeRequestId");

                    b.HasIndex("ChangeRequestNumber")
                        .IsUnique();

                    b.HasIndex("ChangeRequestTypeListItemId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("PriorityListItemId");

                    b.ToTable("ChangeRequest");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ChangeRequestDocument", b =>
                {
                    b.Property<int>("ChangeRequestDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChangeRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeRequestStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("DocumentPath")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ChangeRequestDocumentId");

                    b.HasIndex("ChangeRequestId");

                    b.HasIndex("ChangeRequestStatusId");

                    b.HasIndex("DocumentPath")
                        .IsUnique();

                    b.ToTable("ChangeRequestDocument");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ChangeRequestStatus", b =>
                {
                    b.Property<int>("ChangeRequestStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ChangeRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("ChangeRequestStatusListItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ChangeRequestStatusId");

                    b.HasIndex("ChangeRequestId");

                    b.HasIndex("ChangeRequestStatusListItemId");

                    b.ToTable("ChangeRequestStatus");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ClientId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PersonId")
                        .IsUnique();

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            CompanyId = 1,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            PersonId = 2
                        });
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("CompanyId");

                    b.HasIndex("CompanyName")
                        .IsUnique();

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            CompanyId = 1,
                            CompanyName = "ABC",
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0
                        },
                        new
                        {
                            CompanyId = 2,
                            CompanyName = "XYZ",
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0
                        });
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ListItem", b =>
                {
                    b.Property<int>("ListItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<int>("ListItemCategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("ListItemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ListItemSystemName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ListItemId");

                    b.HasIndex("ListItemSystemName")
                        .IsUnique();

                    b.HasIndex("ListItemCategoryId", "ListItemName")
                        .IsUnique();

                    b.ToTable("ListItem");

                    b.HasData(
                        new
                        {
                            ListItemId = 1,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 1,
                            ListItemName = "Enhancement",
                            ListItemSystemName = "ENHANCEMENT"
                        },
                        new
                        {
                            ListItemId = 2,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 1,
                            ListItemName = "Defect",
                            ListItemSystemName = "DEFECT"
                        },
                        new
                        {
                            ListItemId = 3,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 2,
                            ListItemName = "Low",
                            ListItemSystemName = "LOW"
                        },
                        new
                        {
                            ListItemId = 4,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 2,
                            ListItemName = "Medium",
                            ListItemSystemName = "MEDIUM"
                        },
                        new
                        {
                            ListItemId = 5,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 2,
                            ListItemName = "High",
                            ListItemSystemName = "HIGH"
                        },
                        new
                        {
                            ListItemId = 6,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 2,
                            ListItemName = "Critical",
                            ListItemSystemName = "CRITICAL"
                        },
                        new
                        {
                            ListItemId = 7,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 3,
                            ListItemName = "Pending",
                            ListItemSystemName = "PENDING"
                        },
                        new
                        {
                            ListItemId = 8,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 3,
                            ListItemName = "Approved",
                            ListItemSystemName = "APPROVED"
                        },
                        new
                        {
                            ListItemId = 9,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 3,
                            ListItemName = "Development",
                            ListItemSystemName = "DEVELOPMENT"
                        },
                        new
                        {
                            ListItemId = 10,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 3,
                            ListItemName = "Testing",
                            ListItemSystemName = "TESTING"
                        },
                        new
                        {
                            ListItemId = 11,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 3,
                            ListItemName = "Staging",
                            ListItemSystemName = "STAGING"
                        },
                        new
                        {
                            ListItemId = 12,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryId = 3,
                            ListItemName = "Delivered",
                            ListItemSystemName = "DELIVERED"
                        });
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ListItemCategory", b =>
                {
                    b.Property<int>("ListItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("ListItemCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ListItemCategoryId");

                    b.HasIndex("ListItemCategoryName")
                        .IsUnique();

                    b.ToTable("ListItemCategory");

                    b.HasData(
                        new
                        {
                            ListItemCategoryId = 1,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryName = "CHANGEREQUESTTYPE"
                        },
                        new
                        {
                            ListItemCategoryId = 2,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryName = "PRIORITY"
                        },
                        new
                        {
                            ListItemCategoryId = 3,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            ListItemCategoryName = "CHANGEREQUESTSTATUS"
                        });
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ParentModulelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ModuleId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ModuleId", "ProjectId", "ParentModulelId")
                        .IsUnique();

                    b.ToTable("Module");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Person");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            EmailAddress = "admin123@email.com",
                            FirstName = "Admin",
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            LastName = "Admin",
                            Password = "$2a$11$6YA6PHEKC9.uViUua0geYe2HTisnScKW3hlaPeogog/P.dVlH.Dpu",
                            RoleId = 1
                        },
                        new
                        {
                            PersonId = 789,
                            EmailAddress = "anuj.tamrakar@ekbana.info",
                            FirstName = "Anuj",
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            LastName = "Tamrakar",
                            Password = "$2a$11$euv2qI0XWKD0ndaPoEPKdOBVqTFeeuGa2762jGiWzt/kx3AI9JY1i",
                            RoleId = 1
                        },
                        new
                        {
                            PersonId = 2,
                            EmailAddress = "user123@email.com",
                            FirstName = "User",
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            LastName = "User",
                            Password = "$2a$11$ajSDeiiBIg/IuUvNWe0sx.UwQwc6.CRSN5nP60mnEPOMdcWBhlZJO",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("ProjectId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ProjectName", "CompanyId")
                        .IsUnique();

                    b.ToTable("Project");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("InsertPersonId")
                        .HasColumnType("integer");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdatePersonId")
                        .HasColumnType("integer");

                    b.HasKey("RoleId");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            RoleName = "ADMIN"
                        },
                        new
                        {
                            RoleId = 2,
                            InsertDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertPersonId = 0,
                            RoleName = "CLIENT"
                        });
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Admin", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ChangeRequest", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.ListItem", "ListItemChangeRequestType")
                        .WithMany()
                        .HasForeignKey("ChangeRequestTypeListItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChangeRequestManagement.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChangeRequestManagement.Entities.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChangeRequestManagement.Entities.ListItem", "ListItemPriority")
                        .WithMany()
                        .HasForeignKey("PriorityListItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("ListItemChangeRequestType");

                    b.Navigation("ListItemPriority");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ChangeRequestDocument", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.ChangeRequest", "ChangeRequest")
                        .WithMany()
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChangeRequestManagement.Entities.ChangeRequestStatus", "ChangeRequestStatus")
                        .WithMany()
                        .HasForeignKey("ChangeRequestStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeRequest");

                    b.Navigation("ChangeRequestStatus");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ChangeRequestStatus", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.ChangeRequest", "ChangeRequest")
                        .WithMany()
                        .HasForeignKey("ChangeRequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChangeRequestManagement.Entities.ListItem", "ListItem")
                        .WithMany()
                        .HasForeignKey("ChangeRequestStatusListItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangeRequest");

                    b.Navigation("ListItem");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Client", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ChangeRequestManagement.Entities.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.ListItem", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.ListItemCategory", "ListItemCategory")
                        .WithMany()
                        .HasForeignKey("ListItemCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ListItemCategory");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Module", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Person", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ChangeRequestManagement.Entities.Project", b =>
                {
                    b.HasOne("ChangeRequestManagement.Entities.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });
#pragma warning restore 612, 618
        }
    }
}
